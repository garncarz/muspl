{"name":"MusPl","tagline":"Musical Prolog library","body":"This is a beginning project aiming at logical construction/analysis of musical pieces.\r\nIt's written in [SWI-Prolog](http://www.swi-prolog.org) (version 7, using dicts).\r\nSo far the construction phase is being developed.\r\n\r\n## Simple example\r\n\r\nLoad and export Flies's Lullaby (included in the project) as a Lilypond file\r\nand a karaoke text file.\r\n\r\n```prolog\r\n$ swipl\r\n?- [muspl].\r\ntrue.\r\n\r\n?- loadData('examples/wiegenlied').\r\ntrue.\r\n\r\n?- exportLy('wiegenlied.ly').\r\nmaxCount:144\r\ncount:100\r\ncount:0\r\ntrue.\r\n\r\n?- exportUS('wiegenlied.txt', 'wiegenlied.ogg').\r\ntrue.\r\n\r\n?- halt.\r\n```\r\n\r\nNow run [Lilypond](http://www.lilypond.org) to convert it to\r\n[MIDI](https://garncarz.github.io/muspl/wiegenlied.midi)\r\nand [PDF](https://garncarz.github.io/muspl/wiegenlied.pdf).\r\n\r\n```bash\r\n$ lilypond wiegenlied.ly\r\n```\r\n\r\n[![PDF screen](https://garncarz.github.io/muspl/wiegenlied.png)](https://garncarz.github.io/muspl/wiegenlied.pdf)\r\n\r\nYou can use [TiMidity++](http://timidity.sourceforge.net)\r\nor some other MIDI renderer to convert the MIDI to OGG (or MP3, if you like).\r\n\r\n```bash\r\n$ timidity -Ov wiegenlied.midi -o wiegenlied.ogg\r\n```\r\n\r\nIf you use [UltraStar Deluxe](http://sourceforge.net/projects/ultrastardx)\r\nas your karaoke program, just copy\r\nthe [TXT](https://garncarz.github.io/muspl/wiegenlied.txt)\r\nand [OGG](https://garncarz.github.io/muspl/wiegenlied.ogg) files\r\nto the program's `songs` folder and sing it!\r\n\r\n\r\n## Construction\r\n\r\nSimple melody line:\r\n\r\n```prolog\r\nextra scale{root:f, quality:major}.  % scale of a song\r\n\r\nm melody{start:(1, 1, v),  % bar 1, beat 1, staff 'v' (e.g. voice)\r\n\trelative:(a, 1, 8),  % tone a, octave 1, duration 1/8\r\n\tpitch:[0, 1, 0, -1, -2, -1, -2],  % relative pitches from the scale\r\n\tlen:[1, 1, 1, 1, 1, 1, 2]}.  % multiples of the relative duration\r\n```\r\n\r\nThe same line with lengths described briefly:\r\n\r\n```prolog\r\nm melody{start:(1, 1, v), relative:(a, 1, 8),\r\n\tpitch:[0, 1, 0, -1, -2, -1, -2], len:[1*6, 2]}.\r\n```\r\n\r\nRepeated pitch/length sequences can be reused by a name:\r\n\r\n```prolog\r\nm [\r\n\t'6long' = [1*6, [4, 8, 4]],  % [4, 8, 4] = exact duration 1/4 + 1/8 + 1/4\r\n\tmelody{start:(5, 1, v), relative:(g, 1, 8),\r\n\t\tpitch:[0, -1:1, 0, 0, -1:1, 0, 2], len:'6long'},\r\n\t\t\t% :1 = one semitone up, :(-1) would be one semitone down\r\n\tmelody{start:(5, 1, g), relative:(e, 1, 8),\r\n\t\tpitch:[0, -1:1, 0, 0, -1:1, 0, 2], len:'6long'}\r\n].\r\n```\r\n\r\nBars can be copied, under a condition and transformed in a way:\r\n\r\n```prolog\r\nm copyBars{from:6, to:10, count:2, cond:isStaff(f), action:pitchShift(5)}.\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}